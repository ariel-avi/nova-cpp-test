name: Build and Test C++ Application

on:
  push:
    branches:
      - "*"

jobs:
  check_formatting:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y clang-format

      - name: Format
        run: |
          sh ./scripts/format.sh

  build_and_test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: check_formatting
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            cmake_generator: "Unix Makefiles"
          - os: macos-latest
            cmake_generator: "Xcode"
          - os: windows-latest
            cmake_generator: "Visual Studio 17 2022"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y cmake g++ build-essential

      - name: Install dependencies (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' -y

      - name: Configure CMake
        run: |
          cmake -S . -B build -G "${{ matrix.cmake_generator }}" -DCMAKE_BUILD_TYPE=Release

      - name: Build the application
        run: |
          cmake --build build --config Release --parallel

      - name: Run CTest
        run: |
          cd build
          ctest --output-on-failure -C Release --extra-verbose

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Build-${{ matrix.os }}
          path: build/
